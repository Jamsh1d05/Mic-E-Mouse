import hid
import numpy as np
import time
import matplotlib.pyplot as plt
import matplotlib
from datetime import datetime
import json


matplotlib.use('TkAgg') 

class MouseVibrationAnalyzer:
    def __init__(self, sample_rate=1000):
        self.sample_rate = sample_rate
        self.device = None
        self.vendor_id = None
        self.product_id = None
        self.raw_data = []
        self.movements = []
        self.recording = False

    def find_mouse(self):
        """–ü–æ–∏—Å–∫ HID-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç–∏–ø–∞ –º—ã—à—å"""
        print("üîç –ü–æ–∏—Å–∫ –º—ã—à–∏...")
        for dev in hid.enumerate():
            product = str(dev.get("product_string", "")).lower()
            usage_page = dev.get("usage_page", 0)
            usage = dev.get("usage", 0)
            if (usage_page == 0x01 and usage == 0x02) or "mouse" in product:
                self.vendor_id = dev["vendor_id"]
                self.product_id = dev["product_id"]
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º—ã—à—å: {product}")
                print(f"   VID: 0x{self.vendor_id:04x}, PID: 0x{self.product_id:04x}")
                return True
        print("‚ùå –ú—ã—à—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ HID-—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
        if self.vendor_id is None or self.product_id is None:
            print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
            return False
        try:
            self.device = hid.Device(self.vendor_id, self.product_id)
            self.device.nonblocking = True
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É HID")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def record_raw(self, duration=15):
        """–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö —Å –º—ã—à–∏"""
        if not self.device:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            return False

        print(f"üé¨ –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")
        self.raw_data = []
        start_time = time.time()
        self.recording = True
        packet_count = 0

        try:
            while time.time() - start_time < duration:
                data = self.device.read(64)
                if data:
                    ts = time.time() - start_time
                    self.raw_data.append((ts, bytes(data)))
                    packet_count += 1
                time.sleep(1 / self.sample_rate)
            print(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–ª—É—á–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {packet_count}")
            return True
        except KeyboardInterrupt:
            print("‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")
            return False
        finally:
            self.recording = False

    def decode(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤ –≤ –¥–≤–∏–∂–µ–Ω–∏—è X/Y"""
        if not self.raw_data:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        print("üîç –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        self.movements = []
        for ts, raw in self.raw_data:
            if len(raw) < 3:
                continue
            x = raw[1] - 256 if raw[1] > 127 else raw[1]
            y = raw[2] - 256 if raw[2] > 127 else raw[2]
            self.movements.append((ts, x, y))
        print(f"‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ {len(self.movements)} –¥–≤–∏–∂–µ–Ω–∏–π")

    def analyze(self):
        """Vibration analyze"""
        if not self.movements:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        print("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
        timestamps = np.array([m[0] for m in self.movements])
        xs = np.array([m[1] for m in self.movements])
        ys = np.array([m[2] for m in self.movements])
        magnitude = np.sqrt(xs**2 + ys**2)

        # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –Ω–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è FFT
        t_uniform = np.linspace(timestamps[0], timestamps[-1], len(magnitude))
        mag_uniform = np.interp(t_uniform, timestamps, magnitude)

        fft_result = np.fft.fft(mag_uniform)
        freqs = np.fft.fftfreq(len(fft_result), d=(t_uniform[1]-t_uniform[0]))

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        mean_mag = np.mean(magnitude)
        std_mag = np.std(magnitude)
        threshold = mean_mag + 2 * std_mag
        vib_count = np.sum(magnitude > threshold)

        print(f"üìà –°—Ä–µ–¥–Ω—è—è –∞–º–ø–ª–∏—Ç—É–¥–∞: {mean_mag:.3f}")
        print(f"üìâ –°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_mag:.3f}")
        print(f"‚öôÔ∏è –ü–æ—Ä–æ–≥ –≤–∏–±—Ä–∞—Ü–∏–π: {threshold:.3f}")
        print(f"üí• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∏–∫–æ–≤: {vib_count}")

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        plt.figure(figsize=(15, 10))
        plt.subplot(3, 1, 1)
        plt.plot(timestamps, xs, label="X", alpha=0.7)
        plt.plot(timestamps, ys, label="Y", alpha=0.7)
        plt.title("–ò–∑–º–µ–Ω–µ–Ω–∏—è X/Y")
        plt.legend()
        plt.grid(True)

        plt.subplot(3, 1, 2)
        plt.plot(timestamps, magnitude, color="green", alpha=0.8)
        plt.title("–ú–∞–≥–Ω–∏—Ç—É–¥–∞ –¥–≤–∏–∂–µ–Ω–∏–π")
        plt.grid(True)

        plt.subplot(3, 1, 3)
        plt.plot(freqs[freqs > 0], np.abs(fft_result)[freqs > 0])
        plt.title("–ß–∞—Å—Ç–æ—Ç–Ω—ã–π —Å–ø–µ–∫—Ç—Ä –≤–∏–±—Ä–∞—Ü–∏–π")
        plt.xlabel("–ß–∞—Å—Ç–æ—Ç–∞ (–ì—Ü)")
        plt.ylabel("–ê–º–ø–ª–∏—Ç—É–¥–∞")
        plt.grid(True)
        plt.tight_layout()
        plt.show()
        

    def save(self):
        """Saving to json"""
        if not self.raw_data:
            return
        ts = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"mouse_data_{ts}.json"
        with open(filename, "w") as f:
            json.dump({
                "metadata": {
                    "timestamp": datetime.now().isoformat(),
                    "packets": len(self.raw_data),
                    "vendor_id": self.vendor_id,
                    "product_id": self.product_id,
                },
                "raw_data": [
                    {"t": t, "bytes": raw.hex()} for t, raw in self.raw_data
                ]
            }, f, indent=2)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")

    def run(self, duration=10):
        """Full cycle"""
        if not self.find_mouse(): return
        if not self.connect(): return
        if not self.record_raw(duration): return
        self.decode()
        self.analyze()
        self.save()
        print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    analyzer = MouseVibrationAnalyzer()
    try:
        analyzer.run(duration=10)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        print("\nüîí –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
